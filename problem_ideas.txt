
- ITOA – forces use of new keyword
Write the code for the following function, without using any built-in functions except
malloc or operator new..
char* itoa(int Value, int Base);
where the returned value is allocated on behalf of the caller, value is the integer to
convert, and base is octal, decimal, or hex.

- (6) Spiral Matrix - LeetCode – forces use of new keyword
- Write a function with the following signature that, given a matrix of integers, builds a
- string with the entries of that matrix appended in clockwise order. EX:
matrix below:
2, 3, 4, 8
5, 7, 9, 12
1, 0, 6, 10
would make the string “2, 3, 4, 8, 12, 10, 6, 0, 1, 5, 7, 9”.
void BuildStringFromMatrix(int* Matrix, int NumRows, int NumColumns,
char* OutBuffer)
{
// Your code goes here
}
(6) Spiral Matrix III - LeetCode










(6) Minesweeper - LeetCode
(6) Triangle - LeetCode
(6) Maximal Square - LeetCode
(6) LRU Cache - LeetCode
(6) Find All Anagrams in a String - LeetCode
(6) Brick Wall - LeetCode
(6) Detect Cycles in 2D Grid - LeetCode
(6) Max Sum of Rectangle No Larger Than K - LeetCode

1. Matrix Multiplication
Class Matrix{
Int* m_Data;
Constructor dynamically allocates, destructor frees
Matrix multiply(const matrix& other);
}

2. Vector struct

Class Vector{
	Int x,y;
	Int length();
	Int dotProduct(const Vector& other);
};
3. Overload * operator to multiply matrix, overload +, * operators for vector

4. Polymorphism (Maybe better for discussion?)
Over-ride member functions so child classes print different values
Entity – print(“I am an entity”)
Robot -print(“Beep boop I am a robot”)
ConfusedCyborg-print(“Greetings, fellow human!”)

Entity* e = new Entity/Cyborg/Robot


